{"version":3,"sources":["types/tasks.js","context/task.js","component/TaskComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["ADD_TASK","DELETE_TASK","UPDATE_TASK","initialState","tasks","reducer","state","action","type","newTask","id","Math","random","toString","title","payload","completed","updateText","todo","task","trim","deleteTask","filter","updatedTodos","TaskContext","createContext","TaskProvider","children","value","useReducer","Provider","Style","marginTop","backgroundColor","textAlign","padding","Task","useState","text","setText","setUpdateText","update","setUpdate","userValue","setUserValue","useContext","taskState","dispatch","changeUpdateTaskText","e","target","style","onSubmit","preventDefault","placeholder","onChange","map","className","onClick","taskId","App","TaskComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9dcef8b4.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const UPDATE_TASK = \"UPDATE_TASK\";\r\n","import { createContext, useReducer } from \"react\";\r\n\r\nimport { ADD_TASK, DELETE_TASK, UPDATE_TASK } from \"../types/tasks\";\r\n\r\nconst initialState = {\r\n  tasks: [],\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      const newTask = {\r\n        id: Math.random().toString(16),\r\n        title: action.payload,\r\n        completed: false,\r\n      };\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks, newTask],\r\n      };\r\n    }\r\n\r\n    case UPDATE_TASK: {\r\n      const {\r\n        updateText,\r\n        todo: { id },\r\n      } = action.payload;\r\n\r\n      const task = {\r\n        id,\r\n        title: updateText.trim(),\r\n        completed: false,\r\n      };\r\n\r\n      const deleteTask = state.tasks.filter((task) => task.id !== id);\r\n      return {\r\n        ...state,\r\n        tasks: [task, ...deleteTask],\r\n      };\r\n    }\r\n\r\n    case DELETE_TASK: {\r\n      const updatedTodos = state.tasks.filter(\r\n        (task) => task.id !== action.payload\r\n      );\r\n      return {\r\n        ...state,\r\n        tasks: [...updatedTodos],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const TaskContext = createContext();\r\n\r\nexport const TaskProvider = ({ children }) => {\r\n  const value = useReducer(reducer, initialState);\r\n\r\n  return <TaskContext.Provider value={value}>{children}</TaskContext.Provider>;\r\n};\r\n","import { useContext, useState, Fragment } from \"react\";\r\nimport { TaskContext } from \"../context/task\";\r\nimport { ADD_TASK, DELETE_TASK, UPDATE_TASK } from \"../types/tasks\";\r\nimport { FaTrash, FaCheck } from \"react-icons/fa\";\r\nimport { BsPencilSquare } from \"react-icons/bs\";\r\nconst Task = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [updateText, setUpdateText] = useState(\"\");\r\n  const [update, setUpdate] = useState(false);\r\n  const [userValue, setUserValue] = useState(\"\");\r\n  const [taskState, dispatch] = useContext(TaskContext);\r\n\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n    dispatch({ type: ADD_TASK, payload: text.trim() });\r\n    setText(\"\");\r\n  };\r\n\r\n  const changeTaskText = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const changeUpdateTaskText = (e) => {\r\n    setUpdateText(e.target.value);\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    dispatch({ type: DELETE_TASK, payload: taskId });\r\n  };\r\n\r\n  const updateTask = (todo) => {\r\n    setUpdate(false);\r\n    setUserValue([]);\r\n    setUpdateText(\"\");\r\n    dispatch({ type: UPDATE_TASK, payload: { todo, updateText } });\r\n  };\r\n\r\n  return (\r\n    <div style={Style}>\r\n      <form onSubmit={createTask}>\r\n        <input\r\n          placeholder={\"Ajouter une tÃ¢che\"}\r\n          type=\"text\"\r\n          value={text}\r\n          onChange={changeTaskText}\r\n        />\r\n        <button type={\"submit\"}>Ajouter</button>\r\n      </form>\r\n      <h3>TaskList :</h3>\r\n      {taskState.tasks ? (\r\n        <Fragment>\r\n          {taskState.tasks.map((task) => {\r\n            return (\r\n              <div className=\"container-todo\" key={task.id}>\r\n                {update && task.id === userValue.id ? (\r\n                  <Fragment>\r\n                    <input\r\n                      type=\"text\"\r\n                      value={updateText}\r\n                      onChange={changeUpdateTaskText}\r\n                    />\r\n                    <button onClick={() => updateTask(task, updateText)}>\r\n                      <FaCheck />\r\n                    </button>\r\n                  </Fragment>\r\n                ) : (\r\n                  <Fragment>\r\n                    <p>{task.title}</p>\r\n                    <button\r\n                      onClick={() => {\r\n                        setUpdate(true);\r\n                        setUserValue(task);\r\n                      }}\r\n                    >\r\n                      <BsPencilSquare />\r\n                    </button>\r\n                    <button onClick={() => deleteTask(task.id)}>\r\n                      <FaTrash />\r\n                    </button>\r\n                  </Fragment>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </Fragment>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Style = {\r\n  marginTop: \"2em\",\r\n  backgroundColor: \"lightgrey\",\r\n  textAlign: \"center\",\r\n  padding: \"1em\",\r\n};\r\n\r\nexport default Task;\r\n","import \"./App.css\";\nimport TaskComponent from \"./component/TaskComponent\";\nimport { TaskProvider } from \"./context/task\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskProvider>\n        <TaskComponent />\n      </TaskProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}