{"version":3,"sources":["types/tasks.js","context/task.js","component/TaskComponent.jsx","App.js","reportWebVitals.js","index.js"],"names":["ADD_TASK","DELETE_TASK","UPDATE_TASK","COMPLETED_TASK","initialState","tasks","complete","reducer","state","action","type","newTask","id","Math","random","toString","title","payload","completed","updateText","todo","task","trim","deleteTask","filter","updatedTodos","updatedTodosComplete","updatedTask","completedTask","TaskContext","createContext","TaskProvider","children","value","useReducer","Provider","Style","marginTop","backgroundColor","textAlign","padding","Task","useState","text","setText","error","setError","setUpdateText","update","setUpdate","userValue","setUserValue","useContext","taskState","dispatch","changeUpdateTaskText","e","target","taskId","style","className","onSubmit","preventDefault","length","placeholder","onChange","map","onClick","App","TaskComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAAaA,EAAW,WACXC,EAAc,cACdC,EAAc,cACdC,EAAiB,iB,OCMxBC,EAAe,CACnBC,MAAO,GACPC,SAAU,IAGNC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,KAAKV,EACH,IAAMW,EAAU,CACdC,GAAIC,KAAKC,SAASC,SAAS,IAC3BC,MAAOP,EAAOQ,QACdC,WAAW,GAEb,OAAO,2BACFV,GADL,IAEEH,MAAM,GAAD,mBAAMG,EAAMH,OAAZ,CAAmBM,MAI5B,KAAKT,EAAc,IAAD,EAIZO,EAAOQ,QAFTE,EAFc,EAEdA,WACQP,EAHM,EAGdQ,KAAQR,GAGJS,EAAO,CACXT,KACAI,MAAOG,EAAWG,OAClBJ,WAAW,GAGPK,EAAaf,EAAMH,MAAMmB,QAAO,SAACH,GAAD,OAAUA,EAAKT,KAAOA,KAC5D,OAAO,2BACFJ,GADL,IAEEH,MAAM,CAAEgB,GAAH,mBAAYE,MAIrB,KAAKtB,EACH,IAAMwB,EAAejB,EAAMH,MAAMmB,QAC/B,SAACH,GAAD,OAAUA,EAAKT,KAAOH,EAAOQ,WAEzBS,EAAuBlB,EAAMF,SAASkB,QAC1C,SAACH,GAAD,OAAUA,EAAKT,KAAOH,EAAOQ,WAE/B,OAAO,2BACFT,GADL,IAEEH,MAAM,YAAKoB,GACXnB,SAAS,YAAKoB,KAIlB,KAAKvB,EAAiB,IAAD,EACGM,EAAOQ,QAArBL,EADW,EACXA,GAAII,EADO,EACPA,MACNW,EAAcnB,EAAMH,MAAMmB,QAAO,SAACH,GAAD,OAAUA,EAAKT,KAAOA,KAEvDgB,EAAgB,CACpBhB,KACAI,QACAE,WAAW,GAGb,OAAO,2BACFV,GADL,IAEEH,MAAM,YAAKsB,GACXrB,SAAS,GAAD,mBAAME,EAAMF,UAAZ,CAAsBsB,MAGlC,QACE,OAAOpB,IAIAqB,EAAcC,0BAEdC,EAAe,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvBC,EAAQC,qBAAW3B,EAASH,GAElC,OAAO,cAACyB,EAAYM,SAAb,CAAsBF,MAAOA,EAA7B,SAAqCD,K,eCsDxCI,EAAQ,CACZC,UAAW,MACXC,gBAAiB,YACjBC,UAAW,SACXC,QAAS,OAGIC,EA1IF,WAAM,MAEOC,mBAAS,IAFhB,mBAEVC,EAFU,KAEJC,EAFI,OAGSF,oBAAS,GAHlB,mBAGVG,EAHU,KAGHC,EAHG,OAImBJ,mBAAS,IAJ5B,mBAIVvB,EAJU,KAIE4B,EAJF,OAKWL,oBAAS,GALpB,mBAKVM,EALU,KAKFC,EALE,OAMiBP,mBAAS,IAN1B,mBAMVQ,EANU,KAMCC,EAND,OAQaC,qBAAWvB,GARxB,mBAQVwB,EARU,KAQCC,EARD,KAyBXC,EAAuB,SAACC,GAC5BT,EAAcS,EAAEC,OAAOxB,QAGnBV,EAAa,SAACmC,GAClBJ,EAAS,CAAE5C,KAAMT,EAAagB,QAASyC,KAmBzC,OACE,sBAAKC,MAAOvB,EAAZ,UACGS,EAAQ,mBAAGe,UAAU,QAAb,+BAA6C,KACtD,uBAAMC,SA1CS,SAACL,GAClBA,EAAEM,iBACkB,IAAhBnB,EAAKoB,QACPT,EAAS,CAAE5C,KAAMV,EAAUiB,QAAS0B,EAAKrB,SACzCwB,GAAS,GACTF,EAAQ,KAERE,GAAS,IAmCT,UACE,uBACEkB,YAAa,uBACbtD,KAAK,OACLuB,MAAOU,EACPsB,SApCe,SAACT,GACtBZ,EAAQY,EAAEC,OAAOxB,UAqCb,wBAAQvB,KAAM,SAAd,wBAEF,sBAAKkD,UAAU,kBAAf,UAEE,sBAAKA,UAAU,iBAAf,UACE,4CACCP,EAAUhD,QAAUgD,EAAUhD,MAAMC,SACnC,cAAC,WAAD,UACG+C,EAAUhD,MAAM6D,KAAI,SAAC7C,GACpB,OACE,cAAC,WAAD,UACG2B,GAAU3B,EAAKT,KAAOsC,EAAUtC,GAC/B,eAAC,WAAD,WACE,uBACEF,KAAK,OACLuB,MAAOd,EACP8C,SAAUV,IAEZ,wBAAQY,QAAS,kBA5CnB/C,EA4CoCC,OA3C5B,IAAtBF,EAAW4C,QACbd,GAAU,GACVE,EAAa,IACbJ,EAAc,IACdD,GAAS,GACTQ,EAAS,CAAE5C,KAAMR,EAAae,QAAS,CAAEG,OAAMD,iBAE/C2B,GAAS,IARM,IAAC1B,GA4CE,SACE,cAAC,IAAD,SAIJ,sBAAKwC,UAAU,eAAf,UACE,4BAAIvC,EAAKL,QACT,wBACEmD,QAAS,WACPlB,GAAU,GACVE,EAAa9B,IAHjB,SAME,cAAC,IAAD,MAEF,wBAAQ8C,QAAS,kBA/CjB,SAAC9C,GACrBiC,EAAS,CAAE5C,KAAMP,EAAgBc,QAASI,IA8CCO,CAAcP,IAArC,SACE,cAAC,IAAD,MAEF,wBAAQ8C,QAAS,kBAAM5C,EAAWF,EAAKT,KAAvC,SACE,cAAC,IAAD,UA3BOS,EAAKT,SAmCxB,QAIN,sBAAKgD,UAAU,iBAAf,UACE,qDACCP,EAAU/C,SACT,cAAC,WAAD,UACG+C,EAAU/C,SAAS4D,KAAI,SAAC7C,GACvB,OACE,sBAAKuC,UAAU,eAAf,UACE,mBAAGA,UAAU,WAAb,SAAyBvC,EAAKL,QAE9B,wBAAQmD,QAAS,kBAAM5C,EAAWF,EAAKT,KAAvC,SACE,cAAC,IAAD,cAMR,eCxHCwD,MAVf,WACE,OACE,qBAAKR,UAAU,MAAf,SACE,cAAC,EAAD,UACE,cAACS,EAAD,SCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0b8ba80d.chunk.js","sourcesContent":["export const ADD_TASK = \"ADD_TASK\";\r\nexport const DELETE_TASK = \"DELETE_TASK\";\r\nexport const UPDATE_TASK = \"UPDATE_TASK\";\r\nexport const COMPLETED_TASK = \"COMPLETED_TASK\";\r\n","import { createContext, useReducer } from \"react\";\r\n\r\nimport {\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  UPDATE_TASK,\r\n  COMPLETED_TASK,\r\n} from \"../types/tasks\";\r\n\r\nconst initialState = {\r\n  tasks: [],\r\n  complete: [],\r\n};\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case ADD_TASK: {\r\n      const newTask = {\r\n        id: Math.random().toString(16),\r\n        title: action.payload,\r\n        completed: false,\r\n      };\r\n      return {\r\n        ...state,\r\n        tasks: [...state.tasks, newTask],\r\n      };\r\n    }\r\n\r\n    case UPDATE_TASK: {\r\n      const {\r\n        updateText,\r\n        todo: { id },\r\n      } = action.payload;\r\n\r\n      const task = {\r\n        id,\r\n        title: updateText.trim(),\r\n        completed: false,\r\n      };\r\n\r\n      const deleteTask = state.tasks.filter((task) => task.id !== id);\r\n      return {\r\n        ...state,\r\n        tasks: [task, ...deleteTask],\r\n      };\r\n    }\r\n\r\n    case DELETE_TASK: {\r\n      const updatedTodos = state.tasks.filter(\r\n        (task) => task.id !== action.payload\r\n      );\r\n      const updatedTodosComplete = state.complete.filter(\r\n        (task) => task.id !== action.payload\r\n      );\r\n      return {\r\n        ...state,\r\n        tasks: [...updatedTodos],\r\n        complete: [...updatedTodosComplete],\r\n      };\r\n    }\r\n\r\n    case COMPLETED_TASK: {\r\n      const { id, title } = action.payload;\r\n      const updatedTask = state.tasks.filter((task) => task.id !== id);\r\n\r\n      const completedTask = {\r\n        id,\r\n        title,\r\n        completed: true,\r\n      };\r\n\r\n      return {\r\n        ...state,\r\n        tasks: [...updatedTask],\r\n        complete: [...state.complete, completedTask],\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const TaskContext = createContext();\r\n\r\nexport const TaskProvider = ({ children }) => {\r\n  const value = useReducer(reducer, initialState);\r\n\r\n  return <TaskContext.Provider value={value}>{children}</TaskContext.Provider>;\r\n};\r\n","import { useContext, useState, Fragment } from \"react\";\r\nimport { TaskContext } from \"../context/task\";\r\nimport {\r\n  ADD_TASK,\r\n  DELETE_TASK,\r\n  UPDATE_TASK,\r\n  COMPLETED_TASK,\r\n} from \"../types/tasks\";\r\nimport { FaTrash, FaCheck } from \"react-icons/fa\";\r\nimport { BsPencilSquare } from \"react-icons/bs\";\r\nconst Task = () => {\r\n  // TaskList\r\n  const [text, setText] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [updateText, setUpdateText] = useState(\"\");\r\n  const [update, setUpdate] = useState(false);\r\n  const [userValue, setUserValue] = useState(\"\");\r\n\r\n  const [taskState, dispatch] = useContext(TaskContext);\r\n\r\n  const createTask = (e) => {\r\n    e.preventDefault();\r\n    if (text.length !== 0) {\r\n      dispatch({ type: ADD_TASK, payload: text.trim() });\r\n      setError(false);\r\n      setText(\"\");\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const changeTaskText = (e) => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const changeUpdateTaskText = (e) => {\r\n    setUpdateText(e.target.value);\r\n  };\r\n\r\n  const deleteTask = (taskId) => {\r\n    dispatch({ type: DELETE_TASK, payload: taskId });\r\n  };\r\n\r\n  const updateTask = (todo) => {\r\n    if (updateText.length !== 0) {\r\n      setUpdate(false);\r\n      setUserValue([]);\r\n      setUpdateText(\"\");\r\n      setError(false);\r\n      dispatch({ type: UPDATE_TASK, payload: { todo, updateText } });\r\n    } else {\r\n      setError(true);\r\n    }\r\n  };\r\n\r\n  const completedTask = (task) => {\r\n    dispatch({ type: COMPLETED_TASK, payload: task });\r\n  };\r\n\r\n  return (\r\n    <div style={Style}>\r\n      {error ? <p className=\"error\">Le champ est vide</p> : null}\r\n      <form onSubmit={createTask}>\r\n        <input\r\n          placeholder={\"Ajouter une tÃ¢che\"}\r\n          type=\"text\"\r\n          value={text}\r\n          onChange={changeTaskText}\r\n        />\r\n        <button type={\"submit\"}>Ajouter</button>\r\n      </form>\r\n      <div className=\"container-tasks\">\r\n        {/* TaskList */}\r\n        <div className=\"container-todo\">\r\n          <h3>TaskList :</h3>\r\n          {taskState.tasks && !taskState.tasks.complete ? (\r\n            <Fragment>\r\n              {taskState.tasks.map((task) => {\r\n                return (\r\n                  <Fragment key={task.id}>\r\n                    {update && task.id === userValue.id ? (\r\n                      <Fragment>\r\n                        <input\r\n                          type=\"text\"\r\n                          value={updateText}\r\n                          onChange={changeUpdateTaskText}\r\n                        />\r\n                        <button onClick={() => updateTask(task, updateText)}>\r\n                          <FaCheck />\r\n                        </button>\r\n                      </Fragment>\r\n                    ) : (\r\n                      <div className=\"container-ta\">\r\n                        <p>{task.title}</p>\r\n                        <button\r\n                          onClick={() => {\r\n                            setUpdate(true);\r\n                            setUserValue(task);\r\n                          }}\r\n                        >\r\n                          <BsPencilSquare />\r\n                        </button>\r\n                        <button onClick={() => completedTask(task)}>\r\n                          <FaCheck />\r\n                        </button>\r\n                        <button onClick={() => deleteTask(task.id)}>\r\n                          <FaTrash />\r\n                        </button>\r\n                      </div>\r\n                    )}\r\n                  </Fragment>\r\n                );\r\n              })}\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n\r\n        {/* TaskList completed */}\r\n        <div className=\"container-todo\">\r\n          <h3>TaskListCompleted :</h3>\r\n          {taskState.complete ? (\r\n            <Fragment>\r\n              {taskState.complete.map((task) => {\r\n                return (\r\n                  <div className=\"container-ta\">\r\n                    <p className=\"complete\">{task.title}</p>\r\n\r\n                    <button onClick={() => deleteTask(task.id)}>\r\n                      <FaTrash />\r\n                    </button>\r\n                  </div>\r\n                );\r\n              })}\r\n            </Fragment>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Style = {\r\n  marginTop: \"2em\",\r\n  backgroundColor: \"lightgrey\",\r\n  textAlign: \"center\",\r\n  padding: \"1em\",\r\n};\r\n\r\nexport default Task;\r\n","import \"./App.css\";\nimport TaskComponent from \"./component/TaskComponent\";\nimport { TaskProvider } from \"./context/task\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TaskProvider>\n        <TaskComponent />\n      </TaskProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}